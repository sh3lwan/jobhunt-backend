// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: cv_analysis.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCVAnalysis = `-- name: CreateCVAnalysis :one
INSERT INTO cv_analyses (file_name, original_name, parsed_text, status)
VALUES ($1, $2, $3, $4) RETURNING id, original_name, file_name, parsed_text, structured_json, status, created_at, updated_at
`

type CreateCVAnalysisParams struct {
	FileName     string
	OriginalName string
	ParsedText   pgtype.Text
	Status       string
}

func (q *Queries) CreateCVAnalysis(ctx context.Context, arg CreateCVAnalysisParams) (CvAnalysis, error) {
	row := q.db.QueryRow(ctx, createCVAnalysis,
		arg.FileName,
		arg.OriginalName,
		arg.ParsedText,
		arg.Status,
	)
	var i CvAnalysis
	err := row.Scan(
		&i.ID,
		&i.OriginalName,
		&i.FileName,
		&i.ParsedText,
		&i.StructuredJson,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllCVAnalysis = `-- name: GetAllCVAnalysis :many
SELECT id, original_name, file_name, parsed_text, structured_json, status, created_at, updated_at
FROM cv_analyses
WHERE ($3::text[] IS NULL OR status = ANY($3))
ORDER BY updated_at DESC
LIMIT $1
OFFSET $2
`

type GetAllCVAnalysisParams struct {
	Limit   int32
	Offset  int32
	Column3 []string
}

func (q *Queries) GetAllCVAnalysis(ctx context.Context, arg GetAllCVAnalysisParams) ([]CvAnalysis, error) {
	rows, err := q.db.Query(ctx, getAllCVAnalysis, arg.Limit, arg.Offset, arg.Column3)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CvAnalysis
	for rows.Next() {
		var i CvAnalysis
		if err := rows.Scan(
			&i.ID,
			&i.OriginalName,
			&i.FileName,
			&i.ParsedText,
			&i.StructuredJson,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCVAnalysis = `-- name: GetCVAnalysis :one
SELECT id, original_name, file_name, parsed_text, structured_json, status, created_at, updated_at
FROM cv_analyses
WHERE id = $1
`

func (q *Queries) GetCVAnalysis(ctx context.Context, id int64) (CvAnalysis, error) {
	row := q.db.QueryRow(ctx, getCVAnalysis, id)
	var i CvAnalysis
	err := row.Scan(
		&i.ID,
		&i.OriginalName,
		&i.FileName,
		&i.ParsedText,
		&i.StructuredJson,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCVStatus = `-- name: UpdateCVStatus :exec
UPDATE cv_analyses
SET status      = $2,
    parsed_text = $3
WHERE id = $1
`

type UpdateCVStatusParams struct {
	ID         int64
	Status     string
	ParsedText pgtype.Text
}

func (q *Queries) UpdateCVStatus(ctx context.Context, arg UpdateCVStatusParams) error {
	_, err := q.db.Exec(ctx, updateCVStatus, arg.ID, arg.Status, arg.ParsedText)
	return err
}

const updateCVStructuredJSON = `-- name: UpdateCVStructuredJSON :exec
UPDATE cv_analyses
SET structured_json = $2,
    status          = 'analyzed'
WHERE id = $1
`

type UpdateCVStructuredJSONParams struct {
	ID             int64
	StructuredJson []byte
}

func (q *Queries) UpdateCVStructuredJSON(ctx context.Context, arg UpdateCVStructuredJSONParams) error {
	_, err := q.db.Exec(ctx, updateCVStructuredJSON, arg.ID, arg.StructuredJson)
	return err
}
